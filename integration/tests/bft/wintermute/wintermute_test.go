package wintermute

import (
	"context"
	"testing"

	sdk "github.com/onflow/flow-go-sdk"
	"github.com/stretchr/testify/require"
	"github.com/stretchr/testify/suite"

	"github.com/onflow/flow-go/integration/tests/lib"
)

type WintermuteTestSuite struct {
	Suite
}

func TestDummyOrchestrator(t *testing.T) {
	suite.Run(t, new(WintermuteTestSuite))
}

func (suite *WintermuteTestSuite) TestSealingAndVerificationHappyPath() {
	// wait for next height finalized (potentially first height), called blockA, just to make sure consensus progresses.
	blockA := suite.BlockState.WaitForHighestFinalizedProgress(suite.T())
	suite.T().Logf("blockA generated, height: %v ID: %v\n", blockA.Header.Height, blockA.Header.ID())

	// sends a transaction
	err := suite.AccessClient().DeployContract(context.Background(), sdk.Identifier(suite.net.Root().ID()), lib.CounterContract)
	require.NoError(suite.T(), err, "could not deploy counter")

	// waits until for a different state commitment for a finalized block, call that block blockB,
	// which has more than one chunk on its execution result.
	blockB, _ := lib.WaitUntilFinalizedStateCommitmentChanged(suite.T(), suite.BlockState, suite.ReceiptState, lib.WithMinimumChunks(2))
	suite.T().Logf("got blockB height %v ID %v\n", blockB.Header.Height, blockB.Header.ID())

	// waits for the execution receipt of blockB from both execution nodes, and makes sure that there is no execution fork.
	receiptB1 := suite.ReceiptState.WaitForReceiptFrom(suite.T(), blockB.Header.ID(), suite.exe1ID)
	suite.T().Logf("receipt for blockB generated by execution node-1: %x result ID: %x\n", suite.exe1ID, receiptB1.ExecutionResult.ID())
	receiptB2 := suite.ReceiptState.WaitForReceiptFrom(suite.T(), blockB.Header.ID(), suite.exe2ID)
	suite.T().Logf("receipt for blockB generated by execution node-2: %x result ID: %x\n", suite.exe2ID, receiptB2.ExecutionResult.ID())

	require.Equal(suite.T(), receiptB1.ExecutionResult.ID(), receiptB2.ExecutionResult.ID(), "execution fork happened at blockB")
	resultB := receiptB1.ExecutionResult
	resultBId := resultB.ID()
	// re-evaluates that resultB has more than one chunk.
	require.Greater(suite.T(), len(resultB.Chunks), 1)
	suite.T().Logf("receipt for blockB generated: result ID: %x with %d chunks\n", resultBId, len(resultB.Chunks))

	// waits till result approval emits for all chunks of resultB
	for i := 0; i < len(resultB.Chunks); i++ {
		suite.ApprovalState.WaitForResultApproval(suite.T(), suite.verID, resultBId, uint64(i))
	}

	// waits until blockB is sealed by consensus nodes after result approvals for all of its chunks emitted.
	suite.BlockState.WaitForSealed(suite.T(), blockB.Header.Height)
}
